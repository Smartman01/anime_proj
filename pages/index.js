import Head from 'next/head'
import Image from 'next/image'
import { useState } from 'react'
import styles from '../styles/Home.module.css'
import Character from "../test_data/character_json.json"
import Fuse from 'fuse.js'

export default function Home() {
  const [guess, setGuess] = useState(0);
  const [search, setSearch] = useState("");
  const [results, setResults] = useState([]);
  const [focused, setFocus] = useState(false);
  const [wrongGuesses, setWrongGuesses] = useState([]);

  const options = { keys : [ "name" ], threshold: 0.4 };

  const fuse = new Fuse(Character, options);

  const handleChange = (text) =>
  {
    setSearch(text);

    if (text.length > 0)
    {
      fetch(`https://animewordle.herokuapp.com/animeWordle/searchcharacter/${text}`,
        {
          mode: 'no-cors'
        })
        .then((response) => console.log(response));
    }

    setResults(fuse.search(text))
  }

  const checkGuess = (name) =>
  {
    setFocus(false);

    if (guess >= 4) return;
    
    if (name === Character[5].name)
    {
      console.log("Correct");

      // show popup (user won and correct character with info)
    }
    else if (!wrongGuesses.includes(name))
    {
      setGuess(guess + 1);
      setWrongGuesses([...wrongGuesses, name])

      if (guess === 4)
      {
        // show popup (user lost and correct character with info)
      }
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Character Wordle</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to Character Wordle
        </h1>

        <div className={styles.description}>
          <button className={styles.card}
            style={{
              backgroundColor: 'transparent', cursor: 'pointer',
              minWidth: '140px', textAlign: 'center', fontSize: 15,
              padding: 15
            }}
          >
            How to play?
          </button>
          <button className={styles.card}
            style={{
              backgroundColor: 'transparent', cursor: 'pointer',
              minWidth: '140px', textAlign: 'center', fontSize: 15,
              padding: 15
            }}
          >
            About
          </button>
        </div>

        <div style={{display: 'flex', flexDirection: 'column', marginBottom: 20}}>
          <p style={{marginTop: 0}}>Guess {guess} of 4</p>
          <input id='search_anime' type="text" onChange={(e) => handleChange(e.target.value)}
            className={styles.input_field} onFocus={() => setFocus(true)}
            // onBlur={() => setFocus(false)}
          />
          {
            results.length > 0 && focused ?
              <div style={{
                display: 'flex', flexDirection: 'column',
                zIndex: 10, minWidth: '500px', maxHeight: '200px', overflow: 'auto',
                position: 'absolute', backgroundColor: '#242223', justifySelf: 'center',
                padding: 20, transform: 'translate(0px, 100px)', borderRadius: '10px',
                boxShadow: '5px 5px rgb(0, 0, 0 / 12%)'
              }}>
                {
                  results.map(({item}, index) =>
                  {
                    return (
                      <p style={{width: '100%', cursor: 'pointer'}}
                        onClick={() => checkGuess(item.name)} key={index}
                      >
                        {item.name}
                      </p>
                    )
                  })
                }
              </div>
            : null
          }
          <div style={{display: 'flex', flexDirection: 'row', flexWrap: 'wrap', maxWidth: '500px'}}>
            {
              wrongGuesses.length > 0 ?
                wrongGuesses.map((item, index) =>
                {
                  return (
                    <p
                      style={{
                        fontSize: '15px', backgroundColor: 'burlywood',
                        color: 'black', fontWeight: 'bold', padding: 10,
                        borderRadius: '10px', marginRight: 10, marginBottom: 0
                      }}
                    >
                      {item}
                    </p>
                  )
                })
              : null
            }
          </div>
        </div>

        <div style={{
          backgroundColor: 'white', maxWidth: '650px', minWidth: '500px',
          padding: '15px', color: 'black', borderRadius: '10px',
          fontSize: '20px', textTransform: 'uppercase',
          display: 'flex', flexDirection: 'column', fontWeight: 'bold'
        }}>
          <p style={{textAlign: 'center'}}>Characteristics</p>
          <div style={{display: 'flex', flexWrap: 'wrap', alignItems: 'center', justifyContent: 'center'}}>
            {
              Character[5].characteristics.map((item, index) =>
              {
                return (
                  <p className={styles.card} key={index}
                    style={{
                      fontSize: '15px', backgroundColor: `#${Math.floor(Math.random()*16777215).toString(16)}`,
                    }}
                  >
                    {item}
                  </p>
                )
              })
            }
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
