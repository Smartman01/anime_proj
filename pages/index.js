import Head from 'next/head'
import Image from 'next/image'
import { useState } from 'react'
import styles from '../styles/Home.module.css'
import useSWR from 'swr'
import colors from '../styles/colors.json'
import Popup from '../components/popup'
import Help from '../components/help'
import Gameend from '../components/gameend'

const fetcher = async (...args) => await fetch(...args).then((res) => res.json())

export default function Home() {
  const [guess, setGuess] = useState(0);
  const [correct, setCorrect] = useState(false);
  const [runOnce, setRunOnce] = useState(true);
  const [results, setResults] = useState([]);
  const [focused, setFocus] = useState(false);
  const [wrongGuesses, setWrongGuesses] = useState([]);
  const [popup, setPopup] = useState({show: false, title: ''});

  const { data , error } = useSWR('https://animewordle.herokuapp.com/animeWordle/oftheday/character', fetcher)
  
  const handleChange = (name) =>
  {
    if (name.length > 0)
    {
      fetch(`https://animewordle.herokuapp.com/animeWordle/searchcharacter/${name}`)
      .then((response) => response.json())
      .then((data) => setResults(data));
    }
    else
    {
      setResults([])
    }
  }

  const checkGuess = async (name) =>
  {
    setFocus(false);

    if (guess >= 4) return;

    let res = await fetch(`https://animewordle.herokuapp.com/animeWordle/guesscharacter/${name}`)
    .then((response) => response.json())
    .then((data) => {return data.guessCorrect});

    
    if (res)
    {
      console.log("Correct");
      setCorrect(res)
      
      // show popup (user won and correct character with info)
    }
    else if (!wrongGuesses.includes(name))
    {
      setGuess(guess + 1);
      setWrongGuesses([...wrongGuesses, name])

      if (guess === 4)
      {
        // show popup (user lost and correct character with info)
      }
    }
  }

  const getNextDay = () =>
  {
    var dateFuture = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 1);
    var dateNow = new Date();
    
    var seconds = Math.floor((dateFuture - (dateNow))/1000);
    var minutes = Math.floor(seconds/60);
    var hours = Math.floor(minutes/60);
    var days = Math.floor(hours/24);
    
    hours = hours-(days*24);
    minutes = minutes-(days*24*60)-(hours*60);
    seconds = seconds-(days*24*60*60)-(hours*60*60)-(minutes*60);
    
    console.log(`${hours}:${minutes}:${seconds}`)
  }

  return (
    <div className={styles.container}>
      
      <Head>
        <title>Character Wordle</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div style={{
        position: 'fixed', transform: 'translate(-50%, -50%)',
        top: '50%', left: '50%', display: popup.show ? null : 'none', zIndex: 11
      }}>
        <Popup title={popup.title} close={() => setPopup({show: false, title: ''})}>
          {
            // how
            popup.title === "How to play" ?
              <Help />
            // Statistics
            : popup.title === "Statistics" ?
              <>
              </>
            // game win/lose
            :
              <Gameend />
          }
        </Popup>
      </div>

      <main className={styles.main} style={{filter: `blur(${popup.show ? 50 : 0}px)`}}>

        <h1 className={styles.title}>
          Welcome to Character Wordle
        </h1>

        <div className={styles.description}>
          <button className={styles.card}
            onClick={() => setPopup({show: true, title: 'How to play'})}
            style={{
              backgroundColor: 'transparent', cursor: 'pointer',
              minWidth: '140px', textAlign: 'center', fontSize: 15,
              padding: 15
            }}
          >
            How to play
          </button>
          <button className={styles.card}
            onClick={() => setPopup({show: true, title: 'Statistics'})}
            style={{
              backgroundColor: 'transparent', cursor: 'pointer',
              minWidth: '140px', textAlign: 'center', fontSize: 15,
              padding: 15
            }}
          >
            Statistics
          </button>
        </div>

        <div style={{display: 'flex', flexDirection: 'column', marginBottom: 20}}>
          <p style={{marginTop: 0}}>Guess {guess} of 4</p>
          <input id='search_anime' type="text" onChange={(e) => handleChange(e.target.value)}
            className={styles.input_field} onFocus={() => setFocus(true)}
            // onBlur={() => setFocus(false)}
          />
          {
            results.length > 0 && focused ?
              <div style={{
                display: 'flex', flexDirection: 'column',
                zIndex: 10, minWidth: '500px', maxHeight: '200px', overflow: 'auto',
                position: 'absolute', backgroundColor: '#242223', justifySelf: 'center',
                padding: 20, transform: 'translate(0px, 100px)', borderRadius: '10px',
                boxShadow: '5px 5px rgb(0, 0, 0 / 12%)'
              }}>
                {
                  results.map(({item}, index) =>
                  {
                    return (
                      <p style={{width: '100%', cursor: 'pointer'}}
                        onClick={() => checkGuess(item.name)} key={index}
                      >
                        {item.name}
                      </p>
                    )
                  })
                }
              </div>
            : null
          }
          <div style={{display: 'flex', flexDirection: 'row', flexWrap: 'wrap', maxWidth: '500px'}}>
            {
              wrongGuesses.length > 0 ?
                wrongGuesses.map((item, index) =>
                {
                  return (
                    <p
                      key={index}
                      style={{
                        fontSize: '15px', backgroundColor: 'burlywood',
                        color: 'black', fontWeight: 'bold', padding: 10,
                        borderRadius: '10px', marginRight: 10, marginBottom: 0
                      }}
                    >
                      {item}
                    </p>
                  )
                })
              : null
            }
          </div>
        </div>

        <div style={{
          backgroundColor: 'white', maxWidth: '650px', minWidth: '500px',
          padding: '15px', color: 'black', borderRadius: '10px',
          fontSize: '20px', textTransform: 'uppercase',
          display: 'flex', flexDirection: 'column', fontWeight: 'bold'
        }}>
          <p style={{textAlign: 'center'}}>Characteristics</p>
          <div style={{display: 'flex', flexWrap: 'wrap', alignItems: 'center', justifyContent: 'center'}}>
            {
              data?.characteristics.map((item, index) =>
              {
                return (
                  <p className={styles.card} key={index}
                    style={{
                      fontSize: '15px', backgroundColor: colors[index + 14],
                      // textShadow: '0 0 3px #FFF, 0 0 5px #FFF'
                    }}
                  >
                    {item}
                  </p>
                )
              })
            }
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
